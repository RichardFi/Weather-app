{"version":3,"sources":["components/WeatherCard/index.js","components/WeatherForcast/index.js","components/SearchBar/index.js","images/loading.svg","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Information","WeatherOverall","WeatherIcon","img","Temperature","h2","WeatherDetails","City","WeatherCard","props","weather","timezone","split","src","current","icon","temp","toFixed","className","daily","max","min","Math","round","pop","humidity","uvi","wind_speed","DayOfWeek","WeatherForcast","map","weatherDaily","index","Date","dt","timezone_offset","toUTCString","day","SearchBar","weatherSearch","useState","city","setCity","onSubmit","e","preventDefault","type","id","name","value","onChange","target","Loading","loadingIcon","App","setWeather","australianCities","cities","filter","country","fetchWeatherData","api","a","Axios","get","data","useEffect","process","targetCity","find","toLowerCase","alert","coord","lat","lon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dbeaf27.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst WeatherCard = props => {\r\n  const { weather } = props\r\n  return (\r\n    <Container>\r\n      <City>{weather.timezone.split('/')[1]}</City>\r\n      <Information>\r\n        <WeatherOverall>\r\n          <WeatherIcon\r\n            src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@4x.png`}\r\n          ></WeatherIcon>\r\n          <Temperature>{weather.current.temp.toFixed()}째</Temperature>\r\n        </WeatherOverall>\r\n        <WeatherDetails>\r\n          <div>\r\n            <div>High</div>\r\n            <div className='data'>{weather.daily[0].temp.max}째</div>\r\n          </div>\r\n          <div>\r\n            <div>Low</div>\r\n            <div className='data'>{weather.daily[0].temp.min}째</div>\r\n          </div>\r\n          <div>\r\n            <div>Precipitation</div>\r\n            <div className='data'>\r\n              {Math.round(weather.daily[0].pop * 100)}%\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div>Humidity</div>\r\n            <div className='data'>{weather.daily[0].humidity}%</div>\r\n          </div>\r\n          <div>\r\n            <div>UV</div>\r\n            <div className='data'>{weather.daily[0].uvi}</div>\r\n          </div>\r\n          <div>\r\n            <div>Wind</div>\r\n            <div className='data'>{weather.daily[0].wind_speed}mph</div>\r\n          </div>\r\n        </WeatherDetails>\r\n      </Information>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 860px;\r\n  margin: auto;\r\n  color: white;\r\n`\r\nconst Information = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n`\r\nconst WeatherOverall = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`\r\nconst WeatherIcon = styled.img``\r\nconst Temperature = styled.h2`\r\n  font-size: 4rem;\r\n`\r\nconst WeatherDetails = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  width: 460px;\r\n  border-radius: 5px;\r\n  color: #000000;\r\n  div {\r\n    flex-basis: 33%;\r\n    text-align: center;\r\n    margin: auto;\r\n    color: white;\r\n    div {\r\n      margin: 10px 0;\r\n      font-size: 0.9rem;\r\n    }\r\n    .data {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n`\r\n\r\nconst City = styled.h2`\r\n  font-weight: 400;\r\n  font-size: 2.2rem;\r\n  margin-bottom: 0;\r\n`\r\n\r\nexport default WeatherCard\r\n","import styled from 'styled-components'\r\n\r\nconst WeatherForcast = props => {\r\n  const { weather } = props\r\n  return (\r\n    <Container>\r\n      {weather.daily.map((weatherDaily, index) => {\r\n        if (index === 0) {\r\n          return ''\r\n        }\r\n        return (\r\n          <WeatherCard key={index}>\r\n            <DayOfWeek>\r\n              {\r\n                new Date((weatherDaily.dt + weather.timezone_offset) * 1000)\r\n                  .toUTCString()\r\n                  .split(',')[0]\r\n              }\r\n            </DayOfWeek>\r\n            <WeatherIcon\r\n              src={`http://openweathermap.org/img/wn/${weatherDaily.weather[0].icon}.png`}\r\n            ></WeatherIcon>\r\n            <Temperature>{weatherDaily.temp.day.toFixed()}째</Temperature>\r\n          </WeatherCard>\r\n        )\r\n      })}\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin: 40px auto;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 860px;\r\n  height: 200px;\r\n  align-items: center;\r\n`\r\nconst WeatherCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  padding: 20px 30px;\r\n  border-radius: 5px;\r\n`\r\nconst DayOfWeek = styled.div``\r\nconst WeatherIcon = styled.img``\r\nconst Temperature = styled.div``\r\n\r\nexport default WeatherForcast\r\n","import styled from 'styled-components'\r\nimport { useState } from 'react'\r\n\r\nconst SearchBar = props => {\r\n  const { weatherSearch } = props\r\n\r\n  const [city, setCity] = useState('')\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    weatherSearch(city)\r\n  }\r\n\r\n  const handleFormOnChangeSearch = e => {\r\n    setCity(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type='text'\r\n          id='city'\r\n          name='city'\r\n          value={city}\r\n          onChange={handleFormOnChangeSearch}\r\n        ></input>\r\n\r\n        <button type='submit'>search</button>\r\n      </form>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 860px;\r\n  margin: 0 auto;\r\n  margin-top: 30px;\r\n  button {\r\n    margin-right: 10px;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    padding: 6px 8px;\r\n    color: #ffffff;\r\n    border-radius: 3px;\r\n    height: 30px;\r\n    border: none;\r\n    :hover {\r\n      opacity: 0.8;\r\n    }\r\n  }\r\n  input {\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    border-radius: 3px;\r\n    color: #ffffff;\r\n    margin-right: 10px;\r\n    height: 30px;\r\n    outline: none;\r\n    border: none;\r\n  }\r\n`\r\nexport default SearchBar\r\n","export default __webpack_public_path__ + \"static/media/loading.a1296052.svg\";","import { useEffect, useState } from 'react'\nimport WeatherCard from './components/WeatherCard'\nimport styled from 'styled-components'\nimport WeatherForcast from './components/WeatherForcast'\nimport SearchBar from './components/SearchBar'\nimport loadingIcon from './images/loading.svg'\nimport Axios from 'axios'\nimport cities from './city.list.json'\n\nfunction App () {\n  const [weather, setWeather] = useState(false)\n  const australianCities = cities.filter(city => city.country === 'AU')\n\n  const fetchWeatherData = async api => {\n    setWeather(false)\n    const { data } = await Axios.get(api)\n    setWeather(data)\n  }\n\n  useEffect(() => {\n    const api = `${process.env.REACT_APP_OPEN_WEATHER_API_URL}onecall?lat=-27.4679&lon=153.0281&exclude=hourly,minutely,alerts&appid=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}&units=metric`\n    fetchWeatherData(api)\n  }, [])\n\n  const weatherSearch = targetCity => {\n    const city = australianCities.find(\n      city => city.name.toLowerCase() === targetCity.toLowerCase()\n    )\n    if (!city) {\n      return alert('Please enter a valid city in Australia!')\n    }\n    const api = `${process.env.REACT_APP_OPEN_WEATHER_API_URL}onecall?lat=${city.coord.lat}&lon=${city.coord.lon}&exclude=hourly,minutely,alerts&appid=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}&units=metric`\n    fetchWeatherData(api)\n  }\n  return (\n    <Container>\n      <SearchBar weatherSearch={weatherSearch} />\n      {weather ? (\n        <div>\n          <WeatherCard weather={weather} />\n          <WeatherForcast weather={weather} />\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  margin: auto;\n  width: 960px;\n  height: 600px;\n  background-image: linear-gradient(to top, #48c6ef 0%, #6f86d6 100%);\n  border-radius: 25px;\n  color: #ffffff;\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  font-family: Verdana;\n`\nconst Loading = styled.div`\n  position: fixed;\n  background: url(${loadingIcon}) center center no-repeat;\n  width: 960px;\n  height: 600px;\n`\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}